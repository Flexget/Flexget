name: Docker Image CI

on:
  push:
    branches:
      - develop
    tags:
      - v*.*.*
  pull_request:
    branches:
      - "*"

permissions: { }

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Build Base Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./etc/base.dockerfile
          push: true
          tags: localhost:5000/name/app:latest
          platforms: linux/amd64
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: Build Final Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./etc/final.dockerfile
          push: false
          build-args: BASE_DOCKER_IMAGE=localhost:5000/name/app:latest
          platforms: linux/amd64
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref != 'refs/heads/master' }}
    permissions:
      contents: read # to fetch code (actions/checkout)
      packages: write # to push to ghcr.io

    env:
      IMAGE: "ghcr.io/${{ github.repository_owner }}/flexget"

    steps:
      - uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: github.event_name == 'push'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - run: |
          export "TAG_HASH=base-${HASH_POETRY_LOCK:0:10}-${HASH_BASE_DOCKER:0:10}"
          echo "TAG_HASH=${TAG_HASH}" >> $GITHUB_ENV

          if ! docker pull "${IMAGE}:${TAG_HASH}"; then
            echo "NEED_BUILD_BASE=true" >> $GITHUB_ENV
          fi
        env:
          HASH_POETRY_LOCK: "${{ hashFiles('requirements-docker.txt') }}"
          HASH_BASE_DOCKER: "${{ hashFiles('etc/base.dockerfile') }}"
        name: build base docker image

      - name: Build Base Docker Image
        uses: docker/build-push-action@v4
        if: ${{ env.NEED_BUILD_BASE }}
        with:
          context: ./
          file: ./etc/base.dockerfile
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG_HASH }}
          platforms: linux/amd64
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            flexget/flexget
            ${{ env.IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch

      - name: Build Final Docker Image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./etc/final.dockerfile
          builder: ${{ steps.buildx.output.name }}
          build-args: BASE_DOCKER_IMAGE=${{ env.IMAGE }}:${{ env.TAG_HASH }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}
